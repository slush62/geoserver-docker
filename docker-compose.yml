# docker-compose build
version: '2.1'

services:

    postgis:
        image: docker/postgis
        build: ./docker-postgis
        hostname: postgis
        networks: 
            - geoswarm
        volumes:
            - /home/docker/postgis:/opt/postgres/data:Z
            - /home/docker/postgis-backup:/opt/xfer/backup:Z
            - /home/docker/xfer/pgarchive:/opt/xfer/archivedir:Z
        environment:
            - POSTGRES_USER=geoserver
            - POSTGRES_PASS=geoserver
            - REPLICATION_USER=replicator
            - REPLICATION_PASS=replicator
            - POSTGRES_DBNAME=geoserver
            - ALLOW_IP_RANGE=0.0.0.0/0
            - DATADIR=/opt/postgres/data
            - POSTGRES_MULTIPLE_EXTENSIONS=postgis,hstore,postgis_topology,postgis_raster,pgrouting,pointcloud
            - POSTGRES_TEMPLATE_EXTENSIONS=true
            - ARCHIVE_MODE=on
            - WAL_ARCHIVE=/opt/xfer/archivedir
        ports:
            - 15432:5432
        restart: on-failure
        healthcheck:
            test: "exit 0"

    postgis-slave:
        image: docker/postgis
        hostname: postgis-slave
        networks: 
            - geoswarm
        volumes:
            - /home/docker/postgis-backup:/opt/postgres/data:Z
            - /home/docker/xfer/pgarchive:/opt/xfer/archivedir:Z
        environment:
            - REPLICATE_FROM=postgis
            - ALLOW_IP_RANGE=0.0.0.0/0
            - DATADIR=/opt/postgres/data
            - WAL_ARCHIVE=/opt/xfer/archivedir
            - DESTROY_DATABASE_ON_RESTART=False
        ports:
            - 15433:5432
        depends_on:
            postgis:
                condition: service_healthy
        restart: on-failure
        healthcheck:
            test: "exit 0"

    geoserver:
        image: docker.io/kartoza/geoserver
        hostname: geoserver
        networks: 
            - geoswarm
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - /home/docker/geoserver/data:/opt/geoserver/data_dir:Z
        environment:
            - STABLE_EXTENSIONS=gdal-plugin,libjpeg-turbo-plugin,grib-plugin,importer-plugin
        ports:
            - 8080:8080
        depends_on:
            postgis-slave:
                condition: service_healthy
        restart: on-failure
        healthcheck:
            test: "exit 0"

    artemis:
        image: artemis/debian
        hostname: artemis
        networks: 
            - geoswarm
        volumes:
            -  /home/docker/artemis:/var/lib/artemis-instance:Z
        environment:
            - ARTEMIS_USER=artemis
            - ARTEMIS_PASSWORD=artemis
        ports:
            - 61616:61616
            - 8161:8161
        restart: on-failure
        healthcheck:
            test: "exit 0"

    airmetsdb:
        image: java/dbwriter
        build: ./dbWriter
        networks: 
            - geoswarm
        environment:
            - QUEUENAME=AWCXMLQ
        depends_on:
            artemis:
                condition: service_healthy
            postgis:
                condition: service_healthy
        restart: on-failure
        healthcheck:
            test: "exit 0"

    metarsdb:
        image: java/dbwriter
        build: ./dbWriter
        networks: 
            - geoswarm
        environment:
            - QUEUENAME=METARSQ
        depends_on:
            artemis:
                condition: service_healthy
            postgis:
                condition: service_healthy
        restart: on-failure
        healthcheck:
            test: "exit 0"

    nwscapdb:
        image: java/dbwriter
        build: ./dbWriter
        networks: 
            - geoswarm
        environment:
            - QUEUENAME=NWSCAPQ
        depends_on:
            artemis:
                condition: service_healthy
            postgis:
                condition: service_healthy
        restart: on-failure
        healthcheck:
            test: "exit 0"

    airmetsingest:
        image: java/ingest
        build: ./ingest
        networks:
            - geoswarm
        volumes:
            - /home/docker/ingest/data:/data:Z
        environment:
            - QUEUENAME=AWCXMLQ
            - APPNAME=AIRMETS
            - DELAYTIMESECS=1200
        depends_on:
            artemis:
                condition: service_healthy
            airmetsdb:
                condition: service_healthy
        restart: on-failure
        healthcheck:
            test: "exit 0"

    metarsingest:
        image: java/ingest
        build: ./ingest
        networks:
            - geoswarm
        volumes:
            - /home/docker/ingest/data:/data:Z
        environment:
            - QUEUENAME=METARSQ
            - APPNAME=METARS
            - DELAYTIMESECS=300
        depends_on:
            artemis:
                condition: service_healthy
            metarsdb:
                condition: service_healthy
        restart: on-failure
        healthcheck:
            test: "exit 0"

    nwscapingest:
        image: java/ingest
        build: ./ingest
        networks:
            - geoswarm
        volumes:
            - /home/docker/ingest/data:/data:Z
        environment:
            - QUEUENAME=NWSCAPQ
            - APPNAME=NWSCAP
            - DELAYTIMESECS=600
        depends_on:
            artemis:
                condition: service_healthy
            nwscapdb:
                condition: service_healthy
        restart: on-failure
        healthcheck:
            test: "exit 0"

    pgadmin:
        image: docker.io/dpage/pgadmin4
        networks:
            - geoswarm
        volumes:
            - /home/docker/pgadmin:/var/lib/pgadmin:Z 
        ports:
            - 80:80
        depends_on:
            postgis:
                condition: service_healthy
        environment:
            - PGADMIN_DEFAULT_EMAIL=slush@peraton.com
            - PGADMIN_DEFAULT_PASSWORD=geoserver

        restart: on-failure
        healthcheck:
            test: "exit 0"

networks:
    geoswarm:
        name: geoswarm
        driver: bridge
        ipam:
            driver: default
            config:
                - subnet: 172.0.20.0/24
                  gateway: 172.0.20.1
